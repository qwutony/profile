<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-10T11:37:47-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tony Wu</title><subtitle>Just a student with an interest in cyber security and software development.</subtitle><entry><title type="html">Seckids: The difference between Encoding, Encryption and Hashing</title><link href="http://localhost:4000/2019/04/09/encode-encrypt-hash.html" rel="alternate" type="text/html" title="Seckids: The difference between Encoding, Encryption and Hashing" /><published>2019-04-09T00:00:00-04:00</published><updated>2019-04-09T00:00:00-04:00</updated><id>http://localhost:4000/2019/04/09/encode-encrypt-hash</id><content type="html" xml:base="http://localhost:4000/2019/04/09/encode-encrypt-hash.html">&lt;p&gt;Welcome back to the &lt;strong&gt;‘Security:Kids’&lt;/strong&gt; series where I try to explain many concepts of cyber security in a simplistic and interesting manner. Here is an interesting topic that is important for aspiring security students to understand - what is the difference between encoding, encryption and hashing?&lt;/p&gt;

&lt;p&gt;Before we should try to understand the differences, we should try to find out what is similar between all of these terms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Transformation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The simplest explanation is that encoding, encryption and hashing are all processes for converting data from one format to another. Generally speaking, all three methods transform data from a human-readable state to something that is nearly impossible to read. However that is probably as far as their similarities go.&lt;/p&gt;

&lt;p&gt;The fundamental difference between the data transformation techniques depends on the &lt;em&gt;intention and reasoning behind the need to convert data&lt;/em&gt;. In other words, why does the data need to be transformed?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encoding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Encoding is the process of transforming data to another format. Generally, encoding uses a specific publically available algorithm to convert information to cipher text, which is then easily able to be reversed. The most common format for converting letters, symbols and numbers is ASCII, which is an acronym for the American Standard Code for Information Exchange. For more information, see: &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII (Wikipedia)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fundamentally, the purpose of encoding is to convert data into formats that are easier to be used by other external processes. This can involve converting to a format that is easier to comprehend by the program, or encoding to reduce the overall size of the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Encryption is also the process of transforming data to another format. The difference is that encryption involves the use of an encryption algorithm to convert the original message, usually in plaintext format, to an unreadable ciphertext. The ciphertext can only be reversed using an encryption key, although it is possible to decrypt a message without a key, but substantial resources are required.&lt;/p&gt;

&lt;p&gt;The purpose of encryption is to ensure information can only be consumed by authorized entities. It can be used to prevent data theft since the attacker will be unable to decipher the information. Therefore, encryption is used to for the &lt;strong&gt;security of data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hashing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hashing also allows for the transformation of data from one format to another. Hashing uses a mathematical algorithm to generate a value (known as a hash or digest) from data. Due to the nature of hashing, it is considered to be a one-way function, meaning that data can be turned into a hash, but a hash would be difficult to reconstruct back to the same data.&lt;/p&gt;

&lt;p&gt;Since the hashing of identical data inputs will always result in the same output, hashing can be used to &lt;strong&gt;verify the integrity of data&lt;/strong&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome back to the ‘Security:Kids’ series where I try to explain many concepts of cyber security in a simplistic and interesting manner. Here is an interesting topic that is important for aspiring security students to understand - what is the difference between encoding, encryption and hashing?</summary></entry><entry><title type="html">OWASP Top 10: Injection</title><link href="http://localhost:4000/2019/04/03/owasp-injection.html" rel="alternate" type="text/html" title="OWASP Top 10: Injection" /><published>2019-04-03T00:00:00-04:00</published><updated>2019-04-03T00:00:00-04:00</updated><id>http://localhost:4000/2019/04/03/owasp-injection</id><content type="html" xml:base="http://localhost:4000/2019/04/03/owasp-injection.html">&lt;p&gt;The Open Web Application Security Project (OWASP) constantly maintains a list of concerns regarding web application security.&lt;/p&gt;

&lt;p&gt;The OWASP Top 10 is focuses on the most critical and commonly occurring risks in web application security. The latest update in this project is the &lt;em&gt;OWASP Top 10 - 2017 report&lt;/em&gt;. This series will focus on introducing readers to the concepts of these web application threats, as well as talk about countermeasures and prevention methodology.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Injection/1.jpg&quot; alt=&quot;OWASP Injection&quot; width=&quot;500&quot; /&gt; 
&lt;em&gt;Credits: &lt;strong&gt;Linux Security Blog&lt;/strong&gt; (https://linuxsecurityblog.com/2017/11/23/owasp-a1-injection-cause-and-prevention/)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fundamentals of Injection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Attack Vectors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An injection attack occurs in web applications where untrusted data is passed through an interpreter without adequate code sanitisation. Most likely this is where the application’s input expects one form of data, but the input is not secured from alternatives, leading to an attack being able to inject malicious code.&lt;/p&gt;

&lt;p&gt;Thus, any source of data can be affected by injection attacks. Some examples include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Environment variables&lt;/li&gt;
  &lt;li&gt;Internal Services and External Web Services (such as SQL Injection etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Security Weakness&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Injection-related vulnerabilities are very prevalent in modern web applications primarily because of the continued usage and lack of santisation of legacy code, as well as the minimal security focus in application programming. Injection flaws can easily be detected by most vulnerability scanners, as well as through manual code examination.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Impact&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The impact possibilities that can stream from injection can be severe. Some injections can result in takeover of certain servers, which may then lead to the data breach, disclosure of confidential or private information and denial of access. This may greatly affect the confidence and integrity of businesses if information is leaked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of Injection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;More detailed explanations of the types of injections will be discussed in future posts. The most common type of injections include:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Query Injection&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;SQL Query Injection&lt;/strong&gt;: The attack which a user can inject parts or all of an SQL query, and the data will be processed and executed by the web application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LDAP Injection&lt;/strong&gt;: The modification of LDAP statements in a similar fashion to SQL Injection. This may result in the modification of content outside the scope of LDAP.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XPath Injection&lt;/strong&gt;: The attack technique used to exploit XML Path Language queries that are normally used to navigate XML documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Scripting Language Injection&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Null Byte Injection&lt;/strong&gt;: The actual implementation of higher scripting languages is handled by lower languages. A flaw in the handling will allow for attack vectors, such as placing the null byte ‘\0’ to terminate execution of code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Operating System Injection&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Command Injection&lt;/strong&gt;: A web interface can communicate to a web server and execute operating system commands, such as a bash command. Improper santisation will allow direct access to shell commands.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prevention Methods&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Input validation&lt;/strong&gt;: whitelist input validation to only provide the user with the characters that are necessary for the task, no more, no less.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Escape user data&lt;/strong&gt;: escape special characters for the interpreter where necesary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use secure APIs&lt;/strong&gt;: so that there is no need for interpretation, however in some circumstances these can also contain injection attack vectors.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">The Open Web Application Security Project (OWASP) constantly maintains a list of concerns regarding web application security.</summary></entry><entry><title type="html">FourAndSix: 2.01 Walkthrough</title><link href="http://localhost:4000/2019/04/02/four-and-six-walkthrough.html" rel="alternate" type="text/html" title="FourAndSix: 2.01 Walkthrough" /><published>2019-04-02T00:00:00-04:00</published><updated>2019-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2019/04/02/four-and-six-walkthrough</id><content type="html" xml:base="http://localhost:4000/2019/04/02/four-and-six-walkthrough.html">&lt;p&gt;Welcome to the walkthrough of &lt;strong&gt;FourAndSix: 2.01&lt;/strong&gt;, the second installment of the ‘FourAndSix’ series created by Fred Wemeijer. The objective of this vulnerable machine is to become root and read /root/flag.txt. For more information regarding FourAndSix: 2.01 please visit &lt;a href=&quot;https://www.vulnhub.com/entry/fourandsix-201,266/&quot;&gt;FourAndSix (vulnhub link)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Steps: Information Gathering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our first step is to discover the network we are on using &lt;em&gt;ip r&lt;/em&gt;. This indicates that we are currently in the private network 192.168.72.0/24. This is because our virtual machine is in host-only mode for the purpose of this exercise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/1.png&quot; alt=&quot;ip r&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple netdiscover -r 192.168.72.0/24 scan will reveal our vulnerable machine: 192.168.72.128.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/2.png&quot; alt=&quot;netdiscover scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the IP Address, we are able to perform an nmap scan of all the common TCP ports using the command nmap -sC -sV -A 192.168.72.128:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/3.png&quot; alt=&quot;nmap scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mounting the Network File System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most interesting results from the scan is the NFS → Network File System. The Network File System allows a user or administrator of a system to mount a proportion of the file system onto a server. It allows other users or clients to access whatever is mounted through Remote Procedure Calls, which facilitates the communication between the client and the server. For more information, see: &lt;a href=&quot;https://searchenterprisedesktop.techtarget.com/definition/Network-File-System&quot;&gt;NFS explained&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can use the showmount -e 192.168.72.128 command to query the server regarding more information about the NFS server. The -e flag shows the export list of the NFS server. In this case, the command reveals that the remote server allows the mounting of the /home/user/storage directory of the machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/4.png&quot; alt=&quot;showmount&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By creating a temporary folder /tmp/blah, and mounting the remote folder to the local temporary folder using mount -t nfs 192.168.72.128:/home/user/storage /tmp/blah, then navigating to the directory, we are shown that there is a backup.7z file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extracting the 7z File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to use the linux command 7za x backup.7z to extract the file and reveal its contents. However, the 7zip file is password protected, which means that the only method is to use a password cracker. The output of the results do reveal some interesting information about the contents of the compressed file, including the public and private keys. More on that later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/5.png&quot; alt=&quot;7zip extract&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case there are several methods to attempt to crack the 7 zip file. The most common method is use John the Ripper. This requires to extract the hash from the 7 zip file, using a 7z2john script:&lt;/p&gt;

&lt;p&gt;The Perl Script: &lt;a href=&quot;https://github.com/koboi137/john/blob/master/7z2john.pl&quot;&gt;https://github.com/koboi137/john/blob/master/7z2john.pl&lt;/a&gt; (Confirmed to work)&lt;/p&gt;

&lt;p&gt;The Python Script: &lt;a href=&quot;https://github.com/truongkma/ctf-tools/blob/master/John/run/7z2john.py&quot;&gt;https://github.com/truongkma/ctf-tools/blob/master/John/run/7z2john.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/6.png&quot; alt=&quot;7zip hash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Perl script to create the hash: perl 7zjohn.pl backup.7z &amp;gt; backup.7z.hash. Note the hash continues for a lot of lines past this screenshot. To unhash using john, simply use john –format=7z backup.7z.hash to reveal the password: chocolate.&lt;/p&gt;

&lt;p&gt;Alternatively, it is also possible to use hashcat, as well as the 7z2hashcat perl script, located at: https://github.com/philsmd/7z2hashcat. You can also use cracx for Windows, as well as many online tools that are available for password cracking. Re-enter the password after the 7za x backup.7z command to extract the contents of the 7 zip file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/7.png&quot; alt=&quot;hello kitty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Secure Shell Scripting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pictures are just ordinary images of Hello Kitty. The other two files however, are the public and private keys that allow for SSH into the remote server. We can concatenate the files to discover more about the keys:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/8.png&quot; alt=&quot;ssh keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems these keys are for the user user@fourandsix2. This credential allows us to attempt to SSH with the private key using ssh -i id_rsa user@192.168.72.128:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/9.png&quot; alt=&quot;passphrase&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, it seems that the authentication is rejected because the passphrase is not provided. The reason for this is probably because the private key is encrypted using a symmetric key derived from a passphrase. Therefore we will need to bruteforce the passphrase to be allowed SSH access.&lt;/p&gt;

&lt;p&gt;Normally, ssh-keygen is used to create new public and private keys, but can also be used to dictionary attack and brute force SSH passphrases. The following command found in the help file is what we will need to create a simple script to offline dictionary attack the SSH id_rsa private key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/10.png&quot; alt=&quot;ssh-keygen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The bash script takes each word in the most common 1575 passwords (found at: https://github.com/danielmiessler/SecLists/blob/master/Passwords/probable-v2-top1575.txt) inserts it into the -P parameter of the ssh-keygen command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/11.png&quot; alt=&quot;bash script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After running it, the passphrase is successfully revealed to be 12345678:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/12.png&quot; alt=&quot;running the script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can successfully SSH into the machine using the command from earlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/13.png&quot; alt=&quot;ssh success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enumeration of Local Shell and Privilege Escalation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since we know the machine has a linux operating system, we can conduct some basic enumeration of the box. Our ultimate objective is to obtain root privileges, and according to whoami we are only ‘user’. The id command shows that whilst ‘user’ has standard user and group privileges, it also as another security permission → wheel.&lt;/p&gt;

&lt;p&gt;Wheel is a special user group in modern Unix systems that allows the control access of su (superuser) and sudo commands. This allows the user to gain additional system privileges that are most often restricted to these accounts. Generally, root is also in the wheel group. The most beneficial command in this case will be sudo, since su requires knowledge of the root password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/14.png&quot; alt=&quot;sudo fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, sudo does not exist on this machine, but since this is an OpenBSD Linux machine, there is an alternative → doas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/15.png&quot; alt=&quot;linux enum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the above command find / -perm -4000 -type f 2&amp;gt;/dev/null, it can reveal SUID files, which are files that upon execution will set the user ID to be the owner of the file. /usr/bin/doas will be executed with root permissions.&lt;/p&gt;

&lt;p&gt;We cannot run any command with doas however, because this is restricted by the system. We can check the doas configuration file located in /etc/doas.conf to find more information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/16.png&quot; alt=&quot;doas configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first line of the configuration file is exactly what is needed. It permits the user group to execute this command as root through the doas command. Furthermore, there is no password required (nopass), and the environment is kept the same (keepenv). Since it may be a bit complicated, we’ll break it down:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Permit
Nopass: Does not require any authentication or password
Keepenv: Keep the environment the same
User as root: Grants root permissions for the execution of this command only
Cmd /usr/bin/less: The less command that is allowed to be used
Args /var/log/authlog: The argument that the less command can read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/17.png&quot; alt=&quot;doas arguments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Executing this command will open the authlog file in vim with root permissions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/18.png&quot; alt=&quot;vim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, it seems nothing can be written in it at the moment. This is because vim is in the incorrect mode. Simply enter ‘v’ into vim to change to visual mode, which allows for command inputs, and then either :shell or :!sh to exit the program and execute the respective shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/FourAndSix/19.png&quot; alt=&quot;root&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then simply navigate to the root directory and cat flag.txt and we will have completed the machine! Thank you very much for reading this walkthrough and I’ll see you again next time!&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to the walkthrough of FourAndSix: 2.01, the second installment of the ‘FourAndSix’ series created by Fred Wemeijer. The objective of this vulnerable machine is to become root and read /root/flag.txt. For more information regarding FourAndSix: 2.01 please visit FourAndSix (vulnhub link).</summary></entry><entry><title type="html">Seckids: Basic Introduction to Nmap</title><link href="http://localhost:4000/2019/04/02/what-is-nmap.html" rel="alternate" type="text/html" title="Seckids: Basic Introduction to Nmap" /><published>2019-04-02T00:00:00-04:00</published><updated>2019-04-02T00:00:00-04:00</updated><id>http://localhost:4000/2019/04/02/what-is-nmap</id><content type="html" xml:base="http://localhost:4000/2019/04/02/what-is-nmap.html">&lt;p&gt;Welcome to the first of the &lt;strong&gt;‘Security:Kids’&lt;/strong&gt; series where I try to explain many concepts of cyber security in a simplistic and interesting manner. This topic for this blog post is to introduce readers to &lt;strong&gt;Nmap&lt;/strong&gt;, otherwise known as the &lt;em&gt;Network Mapper&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Nmap/1.png&quot; alt=&quot;nmap logo&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Nmap?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Network Mapper&lt;/em&gt; is a tool developed and used for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Network Exploration&lt;/li&gt;
  &lt;li&gt;Security Auditing&lt;/li&gt;
  &lt;li&gt;Port Scanning&lt;/li&gt;
  &lt;li&gt;Operating System and Version Detection&lt;/li&gt;
  &lt;li&gt;Basic vulnerability scanning…and many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nmap is one of the oldest tools used in penetration testing, having just celebrated its 20th birthday on September 1st, 2017. It is still being actively developed despite its age, and continues to be a versatile and irreplaceable tool in a penetration tester’s arsenal.&lt;/p&gt;

&lt;p&gt;Please note: this post mainly focuses on the Nmap tool that is available on Linux.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help Commands&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The simplest command when attempting to understand a new tool is to use the help function or the manual:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Basic help commands&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Manual for nmap&lt;/span&gt;
man nmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a wide range of different techniques that can be used to adjust the output to what the user wants from each scan. In some cirumstances, if the nmap output is needed to be passed/piped into additional outputs, the &lt;em&gt;-oG&lt;/em&gt; flag would be used, for example.&lt;/p&gt;

&lt;p&gt;Using the &lt;em&gt;nmap -h&lt;/em&gt; command will reveal the various options for nmap, all of which are categorised for simplicity. These are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Target Specification&lt;/li&gt;
  &lt;li&gt;Host Discovery&lt;/li&gt;
  &lt;li&gt;Scan Techniques&lt;/li&gt;
  &lt;li&gt;Port Specification and Scan Order&lt;/li&gt;
  &lt;li&gt;Service/Version Detection&lt;/li&gt;
  &lt;li&gt;Script Scan&lt;/li&gt;
  &lt;li&gt;OS Detection&lt;/li&gt;
  &lt;li&gt;Timing and Performance&lt;/li&gt;
  &lt;li&gt;Firewall/IDS Evasion and Spoofing&lt;/li&gt;
  &lt;li&gt;Output&lt;/li&gt;
  &lt;li&gt;Miscellaneous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most circumstances, depending on the users needs, incorporating a several options from the necessary categories would be sufficient for a scan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic Port Scans&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The most basic port scanning technique is to scan a single IP address using the default nmap command. It scans the 1000 most popular TCP ports and returns the output.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# The default (basic) port scanning command: nmap [IP Address]&lt;/span&gt;
nmap 192.168.72.141

&lt;span class=&quot;c&quot;&gt;# Output&lt;/span&gt;
Starting Nmap 7.70 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at 2019-04-02 11:00 EDT
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;192.168.72.141
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.000095s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 996 closed ports &lt;span class=&quot;c&quot;&gt;# 4 open ports in the most popular 1000 ports&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The state indicates whether the port is currently open closed or filtered. &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The service is what is most commonly running on that port&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or what nmap believes is running on that port. &lt;/span&gt;
PORT    STATE SERVICE
22/tcp  open  ssh 
80/tcp  open  http
110/tcp open  pop3
143/tcp open  imap
MAC Address: 00:0C:29:8A:AB:A8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;VMware&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

Nmap &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;: 1 IP address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 host up&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; scanned &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;13.28 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the default scan only scans the most common ports, the amount of traffic it generates, in addition to the time taken is minimal. However, in circumstances simply scanning the common ports do not reveal the complete picture of all the services that are running. Thus, it is recommended to do a &lt;strong&gt;full port scan&lt;/strong&gt; using the &lt;em&gt;-p&lt;/em&gt; flag to ensure that other ports are accounted for. This flag can also allow for single or ranged port scanning, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Syntax for full port scans&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address]
nmap &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1-65535 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address]

&lt;span class=&quot;c&quot;&gt;# Scanning only a single port&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address]

&lt;span class=&quot;c&quot;&gt;# Scanning a range of ports&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1-1024 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Scenario-based Scanning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is a common example of how to use nmap in penetration testing engagements:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Discovering more information about a completely unknown machine&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# First, use a connect scan of the most common 1000 ports&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-sT&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address] &lt;span class=&quot;nt&quot;&gt;-oG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Output File]
&lt;span class=&quot;c&quot;&gt;# -sT: Connect Scan&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -A: All -&amp;gt; OS and version detection, script scans and traceroute&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -oG: Output results to a file that is grepable (linux)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Afterwards, use a deeper scan to enumerate all the ports&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-sT&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP Address] &lt;span class=&quot;nt&quot;&gt;-oG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Output File]

&lt;span class=&quot;c&quot;&gt;# The grepable file can be used in scripts for further enumeration.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Network Sweeping&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a situation where a user is within an unknown network and has little to no idea what is in the network, it is possible to conduct a network sweeping scan by sending &lt;strong&gt;ICMP ping requests&lt;/strong&gt; to each IP address in the network to discover which machines are currently available.&lt;/p&gt;

&lt;p&gt;Some machines can be down, filtered or block ICMP requests which may cause the results to differ, but it is generally considered a good reference point to conduct a network sweeping scan.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -sn: Ping Scan - disable port scan&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -oA: Outputs the result in all formats (ideally should be specific)&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-sn&lt;/span&gt; 192.168.72.0-254 &lt;span class=&quot;nt&quot;&gt;-oA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Output File]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the output is in greppable format (-oG), some operations can be performed on it to compile all the IP addresses in a format that can be used in vulnerability scanning.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Script Scanning&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All the scripts available to Nmap is located in the /usr/share/nmap/scripts directory (Kali Linux). The script files are in .nse format, which stands for the Nmap Scripting Engine. The NSE allows users to create and share their own scripts, all of which aim to enhance the performance of networking tasks.&lt;/p&gt;

&lt;p&gt;It is recommended to use the &lt;em&gt;–script-updatedb&lt;/em&gt; flag to update the database before using.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Find scripts that are useful for the circumstance&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; /usr/share/nmap/scripts | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;keyword]

&lt;span class=&quot;c&quot;&gt;# An example syntax of scripting&lt;/span&gt;
nmap &lt;span class=&quot;nt&quot;&gt;-iL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;input file] &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;list of scripts] &lt;span class=&quot;nt&quot;&gt;-oG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;output file]
&lt;span class=&quot;c&quot;&gt;# -iL: insert input file if IP range&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# --script=: script notation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# list of scripts: comma separated full names of scripts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#                  can also use * wild card notation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;How to Download?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Visit the download page of the official website at &lt;a href=&quot;https://nmap.org/download.html&quot;&gt;https://nmap.org/download.html&lt;/a&gt; and follow the instructions for your operating system. Some Linux distributions will have Nmap pre-installed (such as Kali Linux).&lt;/p&gt;

&lt;p&gt;Thank you for visiting my website! I will be posting more content about Nmap in the future so stay tuned!&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome to the first of the ‘Security:Kids’ series where I try to explain many concepts of cyber security in a simplistic and interesting manner. This topic for this blog post is to introduce readers to Nmap, otherwise known as the Network Mapper.</summary></entry><entry><title type="html">Droopy: v0.2 Walkthrough</title><link href="http://localhost:4000/2019/04/01/droopy-walkthrough.html" rel="alternate" type="text/html" title="Droopy: v0.2 Walkthrough" /><published>2019-04-01T00:00:00-04:00</published><updated>2019-04-01T00:00:00-04:00</updated><id>http://localhost:4000/2019/04/01/droopy-walkthrough</id><content type="html" xml:base="http://localhost:4000/2019/04/01/droopy-walkthrough.html">&lt;p&gt;&lt;strong&gt;This post is an older post from the beginning of my cyber security studies, about 3 months ago.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Welcome to the walkthrough about &lt;strong&gt;Droopy&lt;/strong&gt;, a vulnerable boot2root machine that is available on Vulnhub &lt;a href=&quot;https://www.vulnhub.com/entry/droopy-v02,143/&quot;&gt; Droopy (vulnhub link)&lt;/a&gt;. This is the methodology of how I successfully obtained root permissions on the Droopy virtual machine, and obtain the flag that was hidden after getting root. Let’s begin!&lt;/p&gt;

&lt;p&gt;Firstly, we find our IP address using &lt;em&gt;ifconfig&lt;/em&gt; and &lt;em&gt;ip r&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A simple netdiscover scan (&lt;em&gt;netdiscover -r 192.168.72.0/24&lt;/em&gt;) then revealed all the other addresses on the network. All the machines are on the local host-only network, so anything caught by the network scanners will either by my machine or the virtual machine or the local gateway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/1.png&quot; alt=&quot;netdiscover scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems like the vulnerable machine has an IP address of 192.168.72.130. We should then use a &lt;em&gt;nmap -Pn -v [IP Address]&lt;/em&gt; scan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/2.png&quot; alt=&quot;nmap scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The nmap scan revealed that the only port open after scanning the first 1000 common ports is port 80 (HTTP).&lt;/p&gt;

&lt;p&gt;We’ll run a deeper nmap scan using &lt;em&gt;nmap -sV -A -v [IP Address]&lt;/em&gt; but for now we’ll explore more into the HTTP port. A &lt;em&gt;dirb&lt;/em&gt; (directory buster) scan should reveal any hidden URLs and potential directories:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/3.png&quot; alt=&quot;dirb scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(There is more to this scan, but the image is cropped because the other parts are irrelevant. Also, because of some issues with the server I have to redownload the VM, which means the IP address has changed.)&lt;/p&gt;

&lt;p&gt;Let’s have a look at the robots.txt file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/4.png&quot; alt=&quot;robots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some interesting directories in this. The /includes/ directory has a lot of other subdirectories which have all the files to the website.&lt;/p&gt;

&lt;p&gt;The website by the way, is a simple Drupal web server, which is a content management system - more on that later. A navigation through the URLs in robots.txt didn’t yield me much, so I moved on.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/5.png&quot; alt=&quot;cmsmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I had discovered that the web server was running on a Drupal CMS engine, I decided to use CMSmap to do some further enumeration of the server.&lt;/p&gt;

&lt;p&gt;The most interesting pieces of information was that the server is run using Apache, PHP and Drupal 7.30. Drupal 7.3 is interesting because generally CMS has many vulnerabilities. I searched it up on CVE and turns out there are a lot of vulnerabilities.&lt;/p&gt;

&lt;p&gt;The most interesting one is the first one because it allows for remote code execution. We want to create a limited shell on the server, so remote code execution is the best idea.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/6.png&quot; alt=&quot;exploits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After trying this for a while, I realised that it doesn’t seem to work. After a while I decided to give something else a try.&lt;/p&gt;

&lt;p&gt;So while I was reading into that, I was a little distracted and thought that it would be a good idea to use Metasploit to infiltrate the system.&lt;/p&gt;

&lt;p&gt;I opened msfconsole and searched for Drupal related exploits. The Drupalgeddon 2 allows for remote code execution so let’s give it a try.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/7.png&quot; alt=&quot;metasploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So after configuring the settings for the exploit, I tried to activate it but it failed repeatedly. 
After being unable to figure it out, I decided to change to another method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/8.png&quot; alt=&quot;failed exploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Searching around the internet again, I realised that there was a possible SQL Injection that allowed creating an admin user on the server. 
It was a python script. I decided to give it a try:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/9.png&quot; alt=&quot;drupal sql&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I succeeded in creating another account, and then logged into the system. After awhile I found the original admin - drupaladmin, and decided to take over his account for fun:&lt;/p&gt;

&lt;p&gt;After navigating around the website, I noticed that it is possible to execute PHP code from the website.&lt;/p&gt;

&lt;p&gt;It required changing some of the admin settings to allow for PHP code to be allowed on the webpage. I downloaded the code for a reverse shell and pasted it in the body of an article to be executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/10.png&quot; alt=&quot;drupaladmin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This allowed for the creation of a web shell, which can then be redirected back to create a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/11.png&quot; alt=&quot;listener&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/12.png&quot; alt=&quot;shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Success! This allowed the creation of a limited reverse shell on my computer, which I used to navigate around.&lt;/p&gt;

&lt;p&gt;The commands that I typed to enumerate the system included:&lt;/p&gt;

&lt;p&gt;Uname -a (revealed that it was a droopy linux kernel)
Cat /etc/passwd (showed some username)
Whoami (www-data)
Cat /proc/version
Cat /etc/issue
Ps aux (found that there is netcat on the system, which turns out to be useless)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/13.png&quot; alt=&quot;shell2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried to find some vulnerabilities using netcat, cron and apache, however they didn’t work.&lt;/p&gt;

&lt;p&gt;I decided maybe there were some kernel-related vulnerabilities that will allow for privilege escalation, so I searched the name of the kernel.&lt;/p&gt;

&lt;p&gt;I downloaded the exploit and transferred it to the /tmp folder of the server using netcat -lp [PORT] &amp;gt; file. 
It was important to transfer to the /tmp folder because this directory has execute permissions for the limited shell user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/14.png&quot; alt=&quot;privesc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the SHELL file could not be executed using ./SHELL no matter how much I tried. 
It seems like the shell that was uploaded to the website has limited functionalities, so we found another PHP reverse shell that was more capable. This allowed us to execute the shell, and obtain root!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/15.png&quot; alt=&quot;success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/16.png&quot; alt=&quot;root&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it is time to locate the flag. After a while of locating, I found a mail with a clue that seems to point at using the rockyou wordlist to bruteforce a password. 
Then I found the dave.tc file that is located in the /root home directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/17.png&quot; alt=&quot;mail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created a simple python server to transfer the dave.tc file onto my own computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/18.png&quot; alt=&quot;simpleserver&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After a long time of research, I discovered that the .tc file extension is truecrypt, and the password can be cracked using truecrack.&lt;/p&gt;

&lt;p&gt;The clues from the www-data file indicates that the password is in the rockyou.txt file that has academy in the name. After a while of searching and using truecrack, the password was found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/19.png&quot; alt=&quot;dictionary attack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The output of the file was in /dev/mapper. I used the mount function to mount the file into a new directory in the /mnt folder. 
Opening the folder resulted in three files and a secret file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/20.png&quot; alt=&quot;mount&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After probing a bit, in the directory .secret/.top was the hidden flag!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/21.png&quot; alt=&quot;flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using cat flag.txt we revealed the flag and completed the challenge! Thank you for visiting and hope it helped!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Droopy/22.png&quot; alt=&quot;flag2&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This post is an older post from the beginning of my cyber security studies, about 3 months ago.</summary></entry></feed>